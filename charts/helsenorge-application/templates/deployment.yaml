apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "common.fullname" . }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount | default 2 }}
  selector:
    matchLabels:
      {{- include "common.selectorLabels.standard" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "common.labels.standard" . | nindent 8 }}
      annotations: 
        splunk.com/sourcetype: {{ .Values.logging.sourceType }}
    spec:
      {{- if or .Values.hostAliases .Values.global.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" (default .Values.global.hostAliases .Values.hostAliases) "context" $) | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "common.serviceAccountName" . }}
      initContainers:
      {{- if .Values.enableTokenValidation }}
      - name: {{ include "common.fullname" . }}-tokenvalidation
        image: {{ .Values.tokenValidation.image}}
        workingDir: {{ .Values.tokenValidation.volumeMount }}
        command: ["certificate-tool"]
        imagePullPolicy: {{ .Values.tokenValidation.imagePullPolicy }}
        args: ["add", "--file", {{ .Values.tokenValidation.filename }} ]
        volumeMounts:
        - name: certificate-store
          mountPath: {{ .Values.certificateStore }}
        - name: tokenvalidation-certificate
          mountPath: {{ .Values.tokenValidation.volumeMount }}
      {{- end }}
      containers:
        - name: {{ include "common.fullname" . }} 
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: {{ include "common.image" . }} 
          imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
          command:
          {{- if .Values.command }}
          {{- include "common.tplvalues.render" (dict "value" .Values.command "context" $) | nindent 12 }}
          {{- else }}
          - dotnet
          {{- end }}
          {{- if .Values.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.args "context" $) | nindent 12 }}
          {{- end }}  
          env:
          {{- if .Values.rabbitmq.createUser }}
          - name: HN_InternalMessagingSettings__Credentials__Username
            valueFrom:
              secretKeyRef:
                name: {{ include "helsenorge-application.rabbitmqUserSecret" . }}
                key: username
          - name: HN_InternalMessagingSettings__Credentials__Password
            valueFrom:
              secretKeyRef:
                name: {{ include "helsenorge-application.rabbitmqUserSecret" . }}
                key: password
          {{- else }}
          - name: HN_InternalMessagingSettings__Credentials__Username
            value: {{ .Values.rabbitmq.user | quote }}
          - name: HN_InternalMessagingSettings__Credentials__Password
            value: {{ .Values.rabbitmq.password | quote }}
          {{- end }}
          - name: HN_InternalMessagingSettings__RootAddress
            value: {{ printf "rabbitmq://%s:%d" .Values.rabbitmq.clusterName (.Values.rabbitmq.port | int ) | quote }}
          - name: HN_InternalMessagingSettings__VirtualHost
            value: {{ .Values.rabbitmq.virtualHost | quote }}
          - name: HN_InternalMessagingSettings__UseSsl
            value: {{ .Values.rabbitmq.useSsl | quote }}
          - name: HN_InternalMessagingSettings__EncryptMessages
            value: {{ .Values.rabbitmq.encryptMessages | quote }}
          - name: HN_EhelseSecurityTokenServiceSettings__ClientId
            value: {{ .Values.clientId | quote }}
          - name: HN_EhelseSecurityTokenServiceSettings__ClientSecret
            value: {{ .Values.clientSecret | quote }}
          - name: HN_LoggingConfiguration__Area
            value: {{ include "logging.area" . | quote }}
          {{- range $key, $val := merge (default dict .Values.extraEnvVars) (default dict .Values.global.extraEnvVars)  }}
          - name: {{ $key }}
            value: {{ $val | quote }}
          {{- end }}
          envFrom:
          {{- if .Values.useSharedConfig }}
          - configMapRef:
              name: felles-config
          - secretRef:
              name: felles-config
          {{- end }}
          {{- if or .Values.extraEnvVarsCM .Values.extraEnvVarsSecret }} 
            {{- if .Values.extraEnvVarsCM }}
            {{- include "common.tplvalues.render" ( dict "value" .Values.extraEnvVarsCM "context" $) | nindent 10 }} 
            {{- end }}
            {{- if .Values.extraEnvVarsSecret }}
            {{- include "common.tplvalues.render" ( dict "value" .Values.extraEnvVarsSecret "context" $) | nindent 10 }}
            {{- end }}
          {{- end }}
          volumeMounts:
          {{- if ( eq (include "common.isDebugEnvironment" .) "true" ) }}
          - name: debug-environment
            mountPath: {{ .Values.debug.configShare }}
            readOnly: true
          {{- end }}
          {{- if .Values.enableTokenValidation }}
          - name: certificate-store
            mountPath: {{ .Values.certificateStore }}
            readOnly: true
          {{- end }}
          {{- if .Values.extraVolumeMounts }}
          {{- include "common.tplvalues.render" ( dict "value" .Values.extraVolumeMounts "context" $) | nindent 10 }} 
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.path }}
              port: http
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.path }}
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
      {{- if ( eq (include "common.isDebugEnvironment" .) "true" ) }}
      - name: debug-environment
        configMap: 
          name: {{ .Values.debug.debugConfigMap }}
      {{- end }}
      {{- if .Values.enableTokenValidation }}
      - name: certificate-store
        emptyDir: {}
      - name: tokenvalidation-certificate
        secret:
          secretName: {{ .Values.tokenValidation.secretName }}
      {{- end }}
      {{- if .Values.extraVolumes }}
      {{- include "common.tplvalues.render" ( dict "value" .Values.extraVolumes "context" $) | nindent 6 }} 
      {{- end }}
